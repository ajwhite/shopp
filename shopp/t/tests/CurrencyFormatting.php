<?php
/**
 * CurrencyFormatting
 *
 *
 *
 * @author Jonathan Davis
 * @version 1.0
 * @copyright Ingenesis Limited, 15 September, 2010
 * @package shopp
 * @subpackage
 **/

/**
 * CurrencyFormatting
 *
 * @author
 * @since 1.1
 * @package shopp
 **/
class CurrencyFormatting extends ShoppTestCase {
	// @todo Need to complete currency formatting tests for all of the new countries added to Shopp in 1.2
	var $formats = array(
		//				0.0123456789	0.123456789		1.234			12.345			123.456			1234.567		12345.678		123456.789		1234567.899
		'CA' => array(	'$0.01',		'$0.12',		'$1.23',		'$12.35',		'$123.46',		'$1,234.57',	'$12,345.68',	'$123,456.79',	'$1,234,567.90'),
		'US' => array(	'$0.01',		'$0.12',		'$1.23',		'$12.35',		'$123.46',		'$1,234.57',	'$12,345.68',	'$123,456.79',	'$1,234,567.90'),
	  'USAF' => array(	'$0.01',		'$0.12',		'$1.23',		'$12.35',		'$123.46',		'$1,234.57',	'$12,345.68',	'$123,456.79',	'$1,234,567.90'),
		'GB' => array(	'£0.01',		'£0.12',		'£1.23',		'£12.35',		'£123.46',		'£1,234.57',	'£12,345.68',	'£123,456.79',	'£1,234,567.90'),
		// 'DZ'
		'AR' => array(	'$0,01',		'$0,12',		'$1,23',		'$12,35',		'$123,46',		'$1.234,57',	'$12.345,68',	'$123.456,79',	'$1.234.567,90'),
		'AW' => array(	'ƒ0.01',		'ƒ0.12',		'ƒ1.23',		'ƒ12.35',		'ƒ123.46',		'ƒ1,234.57',	'ƒ12,345.68',	'ƒ123,456.79',	'ƒ1,234,567.90'),
		'AU' => array(	'$0.01',		'$0.12',		'$1.23',		'$12.35',		'$123.46',		'$1 234.57',	'$12 345.68',	'$123 456.79',	'$1 234 567.90'),
		'AT' => array(	'€0.01',		'€0.12',		'€1.23',		'€12.35',		'€123.46',		'€1,234.57',	'€12,345.68',	'€123,456.79',	'€1,234,567.90'),
		'BB' => array(	'$0.01',		'$0.12',		'$1.23',		'$12.35',		'$123.46',		'$1,234.57',	'$12,345.68',	'$123,456.79',	'$1,234,567.90'),
		'BS' => array(	'$0.01',		'$0.12',		'$1.23',		'$12.35',		'$123.46',		'$1,234.57',	'$12,345.68',	'$123,456.79',	'$1,234,567.90'),
		// 'BH'
		'BE' => array(	'0,01 €',		'0,12 €',		'1,23 €',		'12,35 €',		'123,46 €',		'1.234,57 €',	'12.345,68 €',	'123.456,79 €',	'1.234.567,90 €'),
		'BR' => array(	'R$0,01',		'R$0,12',		'R$1,23',		'R$12,35',		'R$123,46',		'R$1.234,57',	'R$12.345,68',	'R$123.456,79',	'R$1.234.567,90'),
		'BG' => array(	'0,01 лв.',		'0,12 лв.',		'1,23 лв.',		'12,35 лв.',	'123,46 лв.',	'1 234,57 лв.',	'12 345,68 лв.','123 456,79 лв.','1 234 567,90 лв.'),
		'CL' => array(	'$0,01',		'$0,12',		'$1,23',		'$12,35',		'$123,46',		'$1.234,57',	'$12.345,68',	'$123.456,79',	'$1.234.567,90'),
		'CN' => array(	'¥0.01',		'¥0.12',		'¥1.23',		'¥12.35',		'¥123.46',		'¥1,234.57',	'¥12,345.68',	'¥123,456.79',	'¥1,234,567.90'),
		'CO' => array(	'$0,01',		'$0,12',		'$1,23',		'$12,35',		'$123,46',		'$1.234,57',	'$12.345,68',	'$123.456,79',	'$1.234.567,90'),
		'CR' => array(	'₡0,01',		'₡0,12',		'₡1,23',		'₡12,35',		'₡123,46',		'₡1.234,57',	'₡12.345,68',	'₡123.456,79',	'₡1.234.567,90'),
		'HR' => array(	'0,01 kn',		'0,12 kn',		'1,23 kn',		'12,35 kn',		'123,46 kn',	'1.234,57 kn',	'12.345,68 kn',	'123.456,79 kn','1.234.567,90 kn'),
		'CY' => array(	'€0,01',		'€0,12',		'€1,23',		'€12,35',		'€123,46',		'€1.234,57',	'€12.345,68',	'€123.456,79',	'€1.234.567,90'),
		'CZ' => array(	'0,01 Kč',		'0,12 Kč',		'1,23 Kč',		'12,35 Kč',		'123,46 Kč',	'1 234,57 Kč',	'12 345,68 Kč',	'123 456,79 Kč','1 234 567,90 Kč'),
		'DK' => array(	'0,01 kr',		'0,12 kr',		'1,23 kr',		'12,35 kr',		'123,46 kr',	'1.234,57 kr',	'12.345,68 kr',	'123.456,79 kr','1.234.567,90 kr'),
		'DO' => array(	'$0.01',		'$0.12',		'$1.23',		'$12.35',		'$123.46',		'$1,234.57',	'$12,345.68',	'$123,456.79',	'$1,234,567.90'),
		'EC' => array(	'$0.01',		'$0.12',		'$1.23',		'$12.35',		'$123.46',		'$1,234.57',	'$12,345.68',	'$123,456.79',	'$1,234,567.90'),
		'EG' => array(	'£0.01',		'£0.12',		'£1.23',		'£12.35',		'£123.46',		'£1,234.57',	'£12,345.68',	'£123,456.79',	'£1,234,567.90'),
		'EE' => array(	'€0.01',		'€0.12',		'€1.23',		'€12.35',		'€123.46',		'€1,234.57',	'€12,345.68',	'€123,456.79',	'€1,234,567.90'),
		'FI' => array(	'0,01 €',		'0,12 €',		'1,23 €',		'12,35 €',		'123,46 €',		'1 234,57 €',	'12 345,68 €',	'123 456,79 €',	'1 234 567,90 €'),
		'FR' => array(	'0,01 €',		'0,12 €',		'1,23 €',		'12,35 €',		'123,46 €',		'1 234,57 €',	'12 345,68 €',	'123 456,79 €',	'1 234 567,90 €'),
		'DE' => array(	'€0.01',		'€0.12',		'€1.23',		'€12.35',		'€123.46',		'€1,234.57',	'€12,345.68',	'€123,456.79',	'€1,234,567.90'),
		'GR' => array(	'€0.01',		'€0.12',		'€1.23',		'€12.35',		'€123.46',		'€1,234.57',	'€12,345.68',	'€123,456.79',	'€1,234,567.90'),
		'GP' => array(	'€0.01',		'€0.12',		'€1.23',		'€12.35',		'€123.46',		'€1,234.57',	'€12,345.68',	'€123,456.79',	'€1,234,567.90'),
		'GT' => array(	'Q0.01',		'Q0.12',		'Q1.23',		'Q12.35',		'Q123.46',		'Q1,234.57',	'Q12,345.68',	'Q123,456.79',	'Q1,234,567.90'),
		'HK' => array(	'$0.01',		'$0.12',		'$1.23',		'$12.35',		'$123.46',		'$1,234.57',	'$12,345.68',	'$123,456.79',	'$1,234,567.90'),
		'HU' => array(	'0 Ft',			'0 Ft',			'1 Ft',			'12 Ft',		'123 Ft',		'1 235 Ft',		'12 346 Ft',	'123 457 Ft',	'1 234 568 Ft'),
		'IS' => array(	'0 kr.',		'0 kr.',		'1 kr.',		'12 kr.',		'123 kr.',		'1.235 kr.',	'12.346 kr.',	'123.457 kr.',	'1.234.568 kr.'),
		'IN' => array(	'₨0.01',		'₨0.12',		'₨1.23',		'₨12.35',		'₨123.46',		'₨1,234.57',	'₨12,345.68',	'₨1,23,456.79',	'₨12,34,567.90'),
		'ID' => array(	'Rp 0,01',		'Rp 0,12',		'Rp 1,23',		'Rp 12,35',		'Rp 123,46',	'Rp 1.234,57',	'Rp 12.345,68',	'Rp 123.456,79','Rp 1.234.567,90'),
		'IE' => array(	'€0.01',		'€0.12',		'€1.23',		'€12.35',		'€123.46',		'€1,234.57',	'€12,345.68',	'€123,456.79',	'€1,234,567.90'),
		'IL' => array(	'₪ 0.01',		'₪ 0.12',		'₪ 1.23',		'₪ 12.35',		'₪ 123.46',		'₪ 1,234.57',	'₪ 12,345.68',	'₪ 123,456.79',	'₪ 1,234,567.90'),
		'IT' => array(	'€0.01',		'€0.12',		'€1.23',		'€12.35',		'€123.46',		'€1,234.57',	'€12,345.68',	'€123,456.79',	'€1,234,567.90'),
		'JM' => array(	'$0.01',		'$0.12',		'$1.23',		'$12.35',		'$123.46',		'$1,234.57',	'$12,345.68',	'$123,456.79',	'$1,234,567.90'),
		'JP' => array(	'¥0',			'¥0',			'¥1',			'¥12',			'¥123',			'¥1,235',		'¥12,346',		'¥123,457',		'¥1,234,568'),
		'LV' => array(	'0.01 Ls',		'0.12 Ls',		'1.23 Ls',		'12.35 Ls',		'123.46 Ls',	'1 234.57 Ls',	'12 345.68 Ls',	'123 456.79 Ls','1 234 567.90 Ls'),
		'LT' => array(	'0,01 Lt',		'0,12 Lt',		'1,23 Lt',		'12,35 Lt',		'123,46 Lt',	'1.234,57 Lt',	'12.345,68 Lt',	'123.456,79 Lt','1.234.567,90 Lt'),
		'LU' => array(	'€0.01',		'€0.12',		'€1.23',		'€12.35',		'€123.46',		'€1,234.57',	'€12,345.68',	'€123,456.79',	'€1,234,567.90'),
		'MY' => array(	'RM0.01',		'RM0.12',		'RM1.23',		'RM12.35',		'RM123.46',		'RM1,234.57',	'RM12,345.68',	'RM123,456.79',	'RM1,234,567.90'),
		'MT' => array(	'€0.01',		'€0.12',		'€1.23',		'€12.35',		'€123.46',		'€1,234.57',	'€12,345.68',	'€123,456.79',	'€1,234,567.90'),
		'MX' => array(	'$0.01',		'$0.12',		'$1.23',		'$12.35',		'$123.46',		'$1,234.57',	'$12,345.68',	'$123,456.79',	'$1,234,567.90'),
		'NL' => array(	'€0,01',		'€0,12',		'€1,23',		'€12,35',		'€123,46',		'€1.234,57',	'€12.345,68',	'€123.456,79',	'€1.234.567,90'),
		'NZ' => array(	'$0.01',		'$0.12',		'$1.23',		'$12.35',		'$123.46',		'$1,234.57',	'$12,345.68',	'$123,456.79',	'$1,234,567.90'),
		'NG' => array(	'₦0.01',		'₦0.12',		'₦1.23',		'₦12.35',		'₦123.46',		'₦1,234.57',	'₦12,345.68',	'₦123,456.79',	'₦1,234,567.90'),
		'NO' => array(	'kr 0,01',		'kr 0,12',		'kr 1,23',		'kr 12,35',		'kr 123,46',	'kr 1 234,57',	'kr 12 345,68',	'kr 123 456,79','kr 1 234 567,90'),
		'PK' => array(	'₨0.01',		'₨0.12',		'₨1.23',		'₨12.35',		'₨123.46',		'₨1,234.57',	'₨12,345.68',	'₨123,456.79',	'₨1,234,567.90'),
		'PE' => array(	'S/. 0.01',		'S/. 0.12',		'S/. 1.23',		'S/. 12.35',	'S/. 123.46',	'S/. 1,234.57',	'S/. 12,345.68','S/. 123,456.79','S/. 1,234,567.90'),
		'PH' => array(	'Php 0.01',		'Php 0.12',		'Php 1.23',		'Php 12.35',	'Php 123.46',	'Php 1,234.57',	'Php 12,345.68','Php 123,456.79','Php 1,234,567.90'),
		'PL' => array(	'0,01 zł',		'0,12 zł',		'1,23 zł',		'12,35 zł',		'123,46 zł',	'1.234,57 zł',	'12.345,68 zł',	'123.456,79 zł','1.234.567,90 zł'),
		'PT' => array(	'€0.01',		'€0.12',		'€1.23',		'€12.35',		'€123.46',		'€1,234.57',	'€12,345.68',	'€123,456.79',	'€1,234,567.90'),
		'PR' => array(	'$0.01',		'$0.12',		'$1.23',		'$12.35',		'$123.46',		'$1,234.57',	'$12,345.68',	'$123,456.79',	'$1,234,567.90'),
		'RO' => array(	'0,01 lei',		'0,12 lei',		'1,23 lei',		'12,35 lei',	'123,46 lei',	'1.234,57 lei',	'12.345,68 lei','123.456,79 lei','1.234.567,90 lei'),
		'RU' => array(	'0,01 руб',		'0,12 руб',		'1,23 руб',		'12,35 руб',	'123,46 руб',	'1 234,57 руб',	'12 345,68 руб','123 456,79 руб','1 234 567,90 руб'),
		'SG' => array(	'$0.01',		'$0.12',		'$1.23',		'$12.35',		'$123.46',		'$1,234.57',	'$12,345.68',	'$123,456.79',	'$1,234,567.90'),
		'SK' => array(	'€0.01',		'€0.12',		'€1.23',		'€12.35',		'€123.46',		'€1,234.57',	'€12,345.68',	'€123,456.79',	'€1,234,567.90'),
		'SI' => array(	'€0.01',		'€0.12',		'€1.23',		'€12.35',		'€123.46',		'€1,234.57',	'€12,345.68',	'€123,456.79',	'€1,234,567.90'),
		'ZA' => array(	'R0,01',		'R0,12',		'R1,23',		'R12,35',		'R123,46',		'R1 234,57',	'R12 345,68',	'R123 456,79',	'R1 234 567,90'),
		'KR' => array(	'₩0.01',		'₩0.12',		'₩1.23',		'₩12.35',		'₩123.46',		'₩1,234.57',	'₩12,345.68',	'₩123,456.79',	'₩1,234,567.90'),
		'ES' => array(	'€0,01',		'€0,12',		'€1,23',		'€12,35',		'€123,46',		'€1.234,57',	'€12.345,68',	'€123.456,79',	'€1.234.567,90'),
		'VC' => array(	'EC$0.01',		'EC$0.12',		'EC$1.23',		'EC$12.35',		'EC$123.46',	'EC$1,234.57',	'EC$12,345.68',	'EC$123,456.79','EC$1,234,567.90'),
		'SE' => array(	'0,01 kr',		'0,12 kr',		'1,23 kr',		'12,35 kr',		'123,46 kr',	'1 234,57 kr',	'12 345,68 kr',	'123 456,79 kr','1 234 567,90 kr'),
		'CH' => array(	"CHF 0.01",		"CHF 0.12",		"CHF 1.23",		"CHF 12.35",	"CHF 123.46",	"CHF 1'234.57",	"CHF 12'345.68","CHF 123'456.79","CHF 1'234'567.90"),
		'TW' => array(	'NT$0.01',		'NT$0.12',		'NT$1.23',		'NT$12.35',		'NT$123.46',	'NT$1,234.57',	'NT$12,345.68',	'NT$123,456.79','NT$1,234,567.90'),
		'TH' => array(	'0.01฿',		'0.12฿',		'1.23฿',		'12.35฿',		'123.46฿',		'1,234.57฿',	'12,345.68฿',	'123,456.79฿',	'1,234,567.90฿'),
		'TT' => array(	'TT$0.01',		'TT$0.12',		'TT$1.23',		'TT$12.35',		'TT$123.46',	'TT$1,234.57',	'TT$12,345.68',	'TT$123,456.79','TT$1,234,567.90'),
		'TR' => array(	'0,01 TL',		'0,12 TL',		'1,23 TL',		'12,35 TL',		'123,46 TL',	'1.234,57 TL',	'12.345,68 TL',	'123.456,79 TL','1.234.567,90 TL'),
		'UA' => array(	'0,01 ₴',		'0,12 ₴',		'1,23 ₴',		'12,35 ₴',		'123,46 ₴',		'1 234,57 ₴',	'12 345,68 ₴',	'123 456,79 ₴',	'1 234 567,90 ₴'),
		'AE' => array(	'Dhs. 0.01',	'Dhs. 0.12',	'Dhs. 1.23',	'Dhs. 12.35',	'Dhs. 123.46',	'Dhs. 1,234.57','Dhs. 12,345.68','Dhs. 123,456.79',	'Dhs. 1,234,567.90'),
		'UY' => array(	'$0.01',		'$0.12',		'$1.23',		'$12.35',		'$123.46',		'$1,234.57',	'$12,345.68',	'$123,456.79',	'$1,234,567.90'),
		'VE' => array(	'Bs. 0.01',		'Bs. 0.12',		'Bs. 1.23',		'Bs. 12.35',	'Bs. 123.46',	'Bs. 1,234.57','Bs. 12,345.68','Bs. 123,456.79','Bs. 1,234,567.90')
		);
	var $currencies = array();

	function setUp() {
		parent::setUp();

		$countries = Lookup::countries();
		foreach ($countries as $code => $country)
			$this->currencies[$code] = scan_money_format($country['currency']['format']);

	}

	/**
	 *
	 *
	 * @author
	 *
	 * @return
	 **/
	public function test_hundredths () {

		$column = 0;
		$float = 0.0123456789;

		$this->currency_formatting_assertions($column,$float);
	}

	public function test_tenths () {

		$column = 1;
		$float = 0.123456789;

		$this->currency_formatting_assertions($column,$float);
	}

	public function test_singledigit () {

		$column = 2;
		$float = 1.234567;

		$this->currency_formatting_assertions($column,$float);
	}

	public function test_tens () {

		$column = 3;
		$float = 12.345678;

		$this->currency_formatting_assertions($column,$float);
	}

	public function test_hundreds () {

		$column = 4;
		$float = 123.456789;

		$this->currency_formatting_assertions($column,$float);
	}

	public function test_thousands () {

		$column = 5;
		$float = 1234.567890;

		$this->currency_formatting_assertions($column,$float);
	}

	public function test_tenthousands () {

		$column = 6;
		$float = 12345.67890;

		$this->currency_formatting_assertions($column,$float);
	}

	public function test_hundredthousands () {

		$column = 7;
		$float = 123456.7890;

		$this->currency_formatting_assertions($column,$float);
	}

	public function test_millions () {

		$column = 8;
		$float = 1234567.899;

		$this->currency_formatting_assertions($column,$float);
	}


	function currency_formatting_assertions ($column,$float) {

		foreach ($this->formats as $code => $format) {
			$currency_format = $this->currencies[$code];

			$formatted = money($float,$currency_format);
			$this->assertEquals($format[$column],$formatted,"Formatting failed for country code $code from floating point number");
			$this->assertEquals($format[$column],money("$float",$currency_format),"Formatting failed for country code $code from a string");
			$this->assertEquals(round($float,$currency_format['precision']),floatvalue($formatted,true,$currency_format),"Float value failed for country code $code");

			$nf = numeric_format($float,$currency_format['precision'],$currency_format['decimals'],$currency_format['thousands'],$currency_format['grouping']);
			$this->assertEquals(round($float,$currency_format['precision']),floatvalue($nf,true,$currency_format),"Float value failed to reverse the numeric format of $nf for country code $code");

		}

	}




} // end CurrencyFormatting class

?>